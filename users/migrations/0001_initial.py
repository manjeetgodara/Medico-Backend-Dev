# Generated by Django 4.2.6 on 2023-11-24 10:59

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Expertise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Graduation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('expertise_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.expertise')),
            ],
        ),
        migrations.CreateModel(
            name='MaritalStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='OTPSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp', models.CharField(max_length=4)),
                ('expires_at', models.DateTimeField()),
                ('session_id', models.UUIDField()),
                ('identifier', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name_plural': 'OTP_Sessions',
            },
        ),
        migrations.CreateModel(
            name='PostGraduation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('graduation_obj', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='users.graduation')),
            ],
        ),
        migrations.CreateModel(
            name='Religion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mlp_id', models.CharField(max_length=8, unique=True)),
                ('mobile_number', models.CharField(max_length=20)),
                ('name', models.CharField(max_length=100)),
                ('email', models.CharField(max_length=100)),
                ('gender', models.CharField(choices=[('m', 'Male'), ('f', 'Female')], max_length=10)),
                ('dob', models.DateField(blank=True, null=True)),
                ('about', models.TextField(blank=True, null=True)),
                ('future_aspirations', models.TextField(blank=True, null=True)),
                ('mother_tongue', models.CharField(blank=True, max_length=100, null=True)),
                ('is_primary_account', models.BooleanField(default=True, help_text='if false then this account is linked to someone else')),
                ('profile_pictures', models.TextField(default='[]')),
                ('family_photos', models.TextField(default='[]')),
                ('manglik', models.BooleanField(default=False, help_text='If true means you state you are manglik')),
                ('height', models.PositiveIntegerField(default=None, null=True)),
                ('weight', models.PositiveIntegerField(default=None, null=True)),
                ('salary', models.CharField(max_length=100, null=True)),
                ('eating_habits', models.CharField(blank=True, choices=[('veg', 'VEGETARIAN'), ('non_veg', 'NON-VEGETARIAN'), ('eggitarian', 'VEG+EGG'), ('jain', 'JAIN')], default=None, max_length=10, null=True)),
                ('smoking_habits', models.CharField(blank=True, choices=[('ns', 'Non-Smoker'), ('os', 'Occasional Smoker'), ('rs', 'Regular Smoker'), ('tq', 'Trying to Quit')], default=None, max_length=10, null=True)),
                ('drinking_habits', models.CharField(blank=True, choices=[('nd', 'Non-Drinker'), ('sd', 'Social Drinker'), ('od', 'Occasional Drinker'), ('rd', 'Regular Drinker')], default=None, max_length=10, null=True)),
                ('hobbies', models.TextField(default='[]')),
                ('city', models.CharField(blank=True, help_text='City you live in', max_length=50, null=True)),
                ('caste', models.CharField(blank=True, help_text='Your Caste', max_length=50, null=True)),
                ('mandatory_questions_completed', models.BooleanField(default=False, help_text='If True then it means user have completed its mandatory questions')),
                ('profile_createdby', models.CharField(blank=True, default='Candidate', help_text='Indicates who has created that profile', max_length=50, null=True)),
                ('partner_age_preference', models.BooleanField(default=False, help_text='If true then no partner age preference')),
                ('partner_age_from', models.PositiveIntegerField(default=None, null=True)),
                ('partner_age_to', models.PositiveIntegerField(default=None, null=True)),
                ('partner_expertise_preference', models.BooleanField(default=False, help_text='If true then no partner expertise preference')),
                ('partner_religion_preference', models.BooleanField(default=False, help_text='If true then no partner religion preference')),
                ('partner_marital_status_preference', models.BooleanField(default=False, help_text='If true then no partner marital status preference')),
                ('partner_height_preference', models.BooleanField(default=False, help_text='If true then no partner height preference')),
                ('partner_height_from', models.PositiveIntegerField(default=None, null=True)),
                ('partner_height_to', models.PositiveIntegerField(default=None, null=True)),
                ('partner_cities_preference', models.BooleanField(default=False, help_text='If true then no partner cities preference')),
                ('partner_cities_from', models.TextField(default='[]')),
                ('partner_caste_preference', models.BooleanField(default=False, help_text='If true then no partner caste preference')),
                ('partner_caste_from', models.TextField(default='[]')),
                ('is_active', models.BooleanField(default=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('marital_status', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.maritalstatus')),
                ('religion', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.religion')),
            ],
        ),
        migrations.CreateModel(
            name='UserPostGraduation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_graduation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.postgraduation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.user')),
            ],
        ),
        migrations.CreateModel(
            name='SeenUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('times_visited', models.PositiveIntegerField(default=1)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('last_seen', models.DateTimeField(auto_now=True)),
                ('seen_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seen_profile', to='users.user')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to='users.user')),
            ],
        ),
        migrations.CreateModel(
            name='SavedUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('saved_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_profile', to='users.user')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saving_user', to='users.user')),
            ],
        ),
        migrations.CreateModel(
            name='ProfileView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewed_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('viewed_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profile_viewed', to='users.user')),
                ('viewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profile_views', to='users.user')),
            ],
            options={
                'ordering': ['-viewed_at'],
            },
        ),
        migrations.CreateModel(
            name='PartnerReligionPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('religion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.religion')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.user')),
            ],
        ),
        migrations.CreateModel(
            name='PartnerMaritalStatusPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marital_status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.maritalstatus')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.user')),
            ],
        ),
        migrations.CreateModel(
            name='PartnerExpertisePreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expertise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.expertise')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.user')),
            ],
        ),
        migrations.CreateModel(
            name='LinkedAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relation', models.CharField(choices=[('son', 'SON'), ('daughter', 'DAUGHTER'), ('sibling', 'SIBLING'), ('relative', 'RELATIVE'), ('friend', 'FRIEND')], max_length=20)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('linked_user', models.ForeignKey(help_text='Linked users account', on_delete=django.db.models.deletion.CASCADE, related_name='linked_user', to='users.user')),
                ('primary_user', models.ForeignKey(help_text='Main user account', on_delete=django.db.models.deletion.CASCADE, related_name='primary_user', to='users.user')),
            ],
        ),
        migrations.CreateModel(
            name='Intrest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(default='Pending', max_length=20)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('invitation_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitation_from', to='users.user')),
                ('invitation_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitation_to', to='users.user')),
            ],
        ),
        migrations.CreateModel(
            name='ConnectionList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('user_one', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_one', to='users.user')),
                ('user_two', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_two', to='users.user')),
            ],
        ),
        migrations.CreateModel(
            name='BlockedUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('blocked_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocked_user', to='users.user')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocking_user', to='users.user')),
            ],
        ),
        migrations.CreateModel(
            name='AuthToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(editable=False, max_length=40, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_token', to='users.user')),
            ],
            options={
                'verbose_name_plural': 'Auth_Tokens',
            },
        ),
    ]
